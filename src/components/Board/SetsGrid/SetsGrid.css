:root {
  --sets-gap: 0.75rem;
  --sets-row-gap: 0.4rem;
  --sets-item-min: 30px;
  --anim-buffer: 28px;
}

/* Base grid */
.sets-grid {
  display: flex;
  width: auto;
  box-sizing: border-box;
  gap: var(--sets-row-gap);
  padding: 6px;
  overflow: visible;
  pointer-events: auto;
  /* small buffer to avoid temporary scrollbars on y/x translate */
  --buffer: var(--anim-buffer);
}

/* internal reset for ViewSet margins */
.sets-grid .btn-viewset {
  margin: 0 !important;
}

/* item wrapper */
.sets-item {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--sets-gap);
  padding: 0;
  overflow: visible;
  transform-origin: center;
}

/* ---------------- HORIZONTAL (rows stack top->down) ---------------- */
.sets-grid[data-position="horizontal"],
.sets-grid.sets-horizontal {
  flex-direction: column;
  align-items: center;        /* each row centered horizontally */
  justify-content: flex-start;/* anchor top; new rows append downward */
  gap: var(--sets-row-gap);
  padding-bottom: calc(var(--buffer)); /* reserve bottom buffer */
  padding-left: 0; /* ADD THIS */
  padding-right: 0; /* ADD THIS */
}

.sets-row-wrapper {
  display: block;
  overflow: visible;
  width: 100%; /* ADD THIS */
}

/* row: center items symmetrically */
.sets-row {
  display: flex;
  justify-content: center; /* KEEP THIS - centers items in the row */
  align-items: center;
  gap: var(--sets-gap);
  padding: 2px 6px;
  overflow: visible;
  width: 100%; /* ADD THIS */
}

/* ---------------- VERTICAL (columns) ---------------- */
/* Vertical left/right grid container */
.sets-grid[data-position="vertical-left"],
.sets-grid[data-position="vertical-right"] {
  display: flex;
  flex-direction: row;
  justify-content: flex-start; /* left) or flex-end (right) */
  align-items: stretch;        /* columns take full height */
  gap: var(--sets-gap);
  
  /* Make container fill parent so vertical centering works */
  height: 100%;
  overflow: visible;

  /* extra padding from edges */
  padding-left: calc(var(--buffer));
  padding-right: calc(var(--buffer));
}

/* Inner wrapper to vertically center the columns */
.sets-grid[data-position="vertical-left"] .sets-column,
.sets-grid[data-position="vertical-right"] .sets-column {
  display: flex;
  flex-direction: column;
  justify-content: center; /* vertically center items inside the column */
  align-items: center;     /* horizontally center cards inside column */
  height: 100%;            /* make column fill grid vertically */
  overflow: visible;
}

/* ---------------- VERTICAL-LEFT / VERTICAL-RIGHT ---------------- */
.sets-grid[data-position="vertical-left"] {
  flex-direction: row;
  justify-content: flex-start; /* columns start from left and expand right */
  align-items: stretch;        
  gap: var(--sets-gap);
  padding-left: calc(var(--buffer));
  padding-right: 0; /* Remove right padding for left alignment */
  height: 100%;
  overflow: visible;
}

.sets-grid[data-position="vertical-right"] {
  flex-direction: row;
  justify-content: flex-end; /* columns start from right and expand left */
  align-items: stretch;        
  gap: var(--sets-gap);
  padding-right: calc(var(--buffer));
  padding-left: 0; /* Remove left padding for right alignment */
  height: 100%;
  overflow: visible;
}

/* Ensure each column centers its items internally */
.sets-grid[data-position="vertical-left"] .sets-column,
.sets-grid[data-position="vertical-right"] .sets-column {
  display: flex;
  flex-direction: column;
  justify-content: center; /* center items vertically inside the column */
  align-items: center;     /* center items horizontally inside the column */
  overflow: visible;
}

/* ---------------- DOUBLE HORIZONTAL (single centered row) ---------------- */
.sets-grid[data-position="doubleHorizontal"],
.sets-grid.sets-double-horizontal {
  flex-direction: row;
  justify-content: center;
  align-items: center;
  gap: var(--sets-gap);
  padding-left: calc(var(--buffer));
  padding-right: calc(var(--buffer));
  overflow: visible;
  padding-top: 0; /* ADD THIS */
  padding-bottom: 0; /* ADD THIS */
}

.sets-single-row {
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  gap: var(--sets-gap);
  overflow: visible;
  width: 100%; /* ADD THIS */
}

/* responsiveness */
@media (max-width: 900px) {
  :root { --sets-gap: 0.5rem; --sets-row-gap: 0.3rem; --anim-buffer: 22px; }
  .sets-item { min-width: 44px; }
}
@media (max-width: 480px) {
  :root { --sets-gap: 0.35rem; --anim-buffer: 18px; }
  .sets-item { min-width: 40px; }
}
